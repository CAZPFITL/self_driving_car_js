class Visualizer{static drawNetwork(ctx,network){var width=ctx.canvas.width-100,height=ctx.canvas.height-100,levelHeight=height/network.levels.length;for(let i=network.levels.length-1;0<=i;i--){var levelTop=50+lerp(height-levelHeight,0,1==network.levels.length?.5:i/(network.levels.length-1));ctx.setLineDash([7,3]),Visualizer.drawLevel(ctx,network.levels[i],50,levelTop,width,levelHeight,i==network.levels.length-1?["ðŸ ‰","ðŸ ˆ","ðŸ Š","ðŸ ‹"]:[])}}static drawLevel(ctx,level,left,top,width,height,outputLabels){var right=left+width,bottom=top+height,{inputs,outputs,weights,biases}=level;for(let i=0;i<inputs.length;i++)for(let j=0;j<outputs.length;j++)ctx.beginPath(),ctx.moveTo(Visualizer.#getNodeX(inputs,i,left,right),bottom),ctx.lineTo(Visualizer.#getNodeX(outputs,j,left,right),top),ctx.lineWidth=2,ctx.strokeStyle=getRGBA(weights[i][j]),ctx.stroke();for(let i=0;i<inputs.length;i++){var x=Visualizer.#getNodeX(inputs,i,left,right);ctx.beginPath(),ctx.arc(x,bottom,18,0,2*Math.PI),ctx.fillStyle="black",ctx.fill(),ctx.beginPath(),ctx.arc(x,bottom,18*.6,0,2*Math.PI),ctx.fillStyle=getRGBA(inputs[i]),ctx.fill()}for(let i=0;i<outputs.length;i++){const x=Visualizer.#getNodeX(outputs,i,left,right);ctx.beginPath(),ctx.arc(x,top,18,0,2*Math.PI),ctx.fillStyle="black",ctx.fill(),ctx.beginPath(),ctx.arc(x,top,18*.6,0,2*Math.PI),ctx.fillStyle=getRGBA(outputs[i]),ctx.fill(),ctx.beginPath(),ctx.lineWidth=2,ctx.arc(x,top,14.4,0,2*Math.PI),ctx.strokeStyle=getRGBA(biases[i]),ctx.setLineDash([3,3]),ctx.stroke(),ctx.setLineDash([]),outputLabels[i]&&(ctx.beginPath(),ctx.textAlign="center",ctx.textBaseline="middle",ctx.fillStyle="black",ctx.strokeStyle="white",ctx.font="27px Arial",ctx.fillText(outputLabels[i],x,top+1.8),ctx.lineWidth=.5,ctx.strokeText(outputLabels[i],x,top+1.8))}}static#getNodeX(nodes,index,left,right){return lerp(left,right,1==nodes.length?.5:index/(nodes.length-1))}}export{Visualizer};