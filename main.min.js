import{colors,updateEntities,processCtx,drawEntities,getCanvas,random,generateCars}from"./js/utils.js";import{Car}from"./js/car.js";import{Road}from"./js/road.js";import{trafficData}from"./js/traffic.js";import{Visualizer}from"./js/visualizer.js";import{NeuralNetwork}from"./js/network.js";var request;const{gameCanvas,gameCtx,networkCanvas,networkCtx,factory}=getCanvas(200),road=factory.create(Road,{x:gameCanvas.width/2,width:.9*gameCanvas.width});if(window.cars=generateCars(factory,road,50),window.bestCar=cars[0].brain,localStorage.getItem("bestBrain"))for(let i=0;i<cars.length;i++)cars[i].brain=JSON.parse(localStorage.getItem("bestBrain")),0!=i&&NeuralNetwork.mutate(cars[i].brain,.1);const traffic=trafficData(road).map(({x,y})=>factory.create(Car,{x:x,y:y,model:"sedan",color:colors[Math.floor(random(5,colors.length))]})),animate=(window.save=()=>{localStorage.setItem("bestBrain",JSON.stringify(window.bestCar.brain))},window.discard=()=>{localStorage.removeItem("bestBrain")},time=>{window.bestCar=cars.find(car=>car.y===Math.min(...cars.map(car=>car.y))),updateEntities({road:road,cars:cars,traffic:traffic}),processCtx({gameCanvas:gameCanvas,gameCtx:gameCtx,networkCanvas:networkCanvas,networkCtx:networkCtx,bestCar:bestCar}),drawEntities(gameCtx,[road,traffic,cars],bestCar),gameCtx.restore(),networkCtx.lineDashOffset=-time/50,Visualizer.drawNetwork(networkCtx,bestCar.brain),request=requestAnimationFrame(animate)});request=requestAnimationFrame(animate);