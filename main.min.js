import{colors,updateEntities,processCtx,drawEntities,getCanvas,random}from"./js/utils.js";import{Car}from"./js/car.js";import{Road}from"./js/road.js";import{trafficData}from"./js/traffic.js";import{Visualizer}from"./js/visualizer.js";function generateCars(N){const cars=[];for(let i=0;i<N;i++)cars.push(factory.create(Car,{x:road.getLaneCenter(1),y:100,model:"sedan",control:"AI",color:colors[2]}));return cars}var request;const{gameCanvas,gameCtx,networkCanvas,networkCtx,factory}=getCanvas(200),road=factory.create(Road,{x:gameCanvas.width/2,width:.9*gameCanvas.width}),N=200,traffic=(window.cars=generateCars(N),window.bestCar=cars[0].brain,localStorage.getItem("bestBrain")&&console.log(localStorage.getItem("bestBrain")),trafficData(road).map(({x,y})=>factory.create(Car,{x:x,y:y,model:"sedan",color:colors[Math.floor(random(5,colors.length))]}))),animate=(window.save=()=>{localStorage.setItem("bestBrain",JSON.stringify(window.bestCar.brain)),console.log("localStorage",localStorage),console.log(window.bestCar,"saved")},window.discard=()=>{localStorage.removeItem("bestBrain")},time=>{window.bestCar=cars.find(car=>car.y===Math.min(...cars.map(car=>car.y))),updateEntities({road:road,cars:cars,traffic:traffic}),processCtx({gameCanvas:gameCanvas,gameCtx:gameCtx,networkCanvas:networkCanvas,networkCtx:networkCtx,bestCar:bestCar}),drawEntities(gameCtx,[road,traffic,cars],bestCar),gameCtx.restore(),networkCtx.lineDashOffset=-time/50,Visualizer.drawNetwork(networkCtx,bestCar.brain),request=requestAnimationFrame(animate)});request=requestAnimationFrame(animate);